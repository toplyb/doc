(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{401:function(t,v,_){t.exports=_.p+"assets/img/image-20201018184733783.24b031f0.png"},402:function(t,v,_){t.exports=_.p+"assets/img/image-20201018185012278.0cd59337.png"},403:function(t,v,_){t.exports=_.p+"assets/img/image-20201019222709162.68642691.png"},404:function(t,v,_){t.exports=_.p+"assets/img/image-20201019222910646.830b053a.png"},405:function(t,v,_){t.exports=_.p+"assets/img/image-20201018232651444.2f83fffd.png"},406:function(t,v,_){t.exports=_.p+"assets/img/image-20210223235909204.51fe0657.png"},459:function(t,v,_){"use strict";_.r(v);var e=_(51),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"svn相对git来说的弊端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#svn相对git来说的弊端"}},[t._v("#")]),t._v(" SVN相对Git来说的弊端")]),t._v(" "),e("p",[e("code",[t._v("Git")]),t._v(" 是分布式版本控制系统, 而 "),e("code",[t._v("SVN")]),t._v(" 是集中化版本控制系统,这种系统带来的弊端有 :")]),t._v(" "),e("ul",[e("li",[t._v("中央服务器如果出问题的话, 那么在此期间所有人都无法提交更新,因为 SVN"),e("code",[t._v("的所有操作都需要和中央服务器交互. 而")]),t._v("Git "),e("code",[t._v("是每个开发者都在本地有一个")]),t._v("git 仓库, 这个仓库中有整个项目的变更历史")]),t._v(" "),e("li",[t._v("如果磁盘出问题, 那么整个项目的变更历史都将不存在")]),t._v(" "),e("li",[t._v("克隆项目的时候很慢")]),t._v(" "),e("li",[e("code",[t._v("Git")]),t._v(" 可以在本地查看项目的整个历史, 但是 "),e("code",[t._v("SVN")]),t._v(" 必须要连接中央服务器才能刚查看")])]),t._v(" "),e("h2",{attrs:{id:"git起步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git起步"}},[t._v("#")]),t._v(" Git起步")]),t._v(" "),e("h3",{attrs:{id:"git-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-安装"}},[t._v("#")]),t._v(" Git 安装")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("yum install git")])])]),t._v(" "),e("h3",{attrs:{id:"git-文件的三种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-文件的三种状态"}},[t._v("#")]),t._v(" "),e("code",[t._v("Git")]),t._v(" 文件的三种状态")]),t._v(" "),e("ol",[e("li",[t._v("已修改 : 表示本地文件已修改, 但是还没有保存到本地版本库中 (工作区)")]),t._v(" "),e("li",[t._v("已暂存 : 表示对本地已经修改过的文件做了一个标记, 使之包含在下次的提交中 (暂存区)")]),t._v(" "),e("li",[t._v("已提交 : 表示文件已成功保存到本地版本库 (Git仓库目录)")])]),t._v(" "),e("h3",{attrs:{id:"git-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-配置"}},[t._v("#")]),t._v(" "),e("code",[t._v("Git")]),t._v(" 配置")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("查看所有的配置以及配置所在的文件 :")]),t._v(" "),e("p",[e("code",[t._v("git config --list --show-origin")])])])]),t._v(" "),e("img-wrapper",[e("img",{attrs:{src:_(401)}})]),t._v(" "),e("p",[e("code",[t._v("git config --list")]),t._v(" 查看所有的配置信息\n"),e("img-wrapper",[e("img",{attrs:{src:_(402)}})])],1),t._v(" "),e("ul",[e("li",[e("p",[t._v("配置用户名和邮箱")]),t._v(" "),e("p",[e("code",[t._v("git config --global user.name 'xiaosheng'")])]),t._v(" "),e("p",[e("code",[t._v("git config --global user.email '1029739052@qq.com'")])]),t._v(" "),e("ul",[e("li",[t._v("用户名有可能会重复,以最后一个为准")])])])]),t._v(" "),e("h2",{attrs:{id:"生成-ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成-ssh-key"}},[t._v("#")]),t._v(" 生成 ssh key")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("ssh-keygen -o")])])]),t._v(" "),e("h2",{attrs:{id:"git-基本操作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-基本操作流程"}},[t._v("#")]),t._v(" Git 基本操作流程")]),t._v(" "),e("h4",{attrs:{id:"克隆现有的仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#克隆现有的仓库"}},[t._v("#")]),t._v(" 克隆现有的仓库")]),t._v(" "),e("p",[e("code",[t._v("git clone https://gitee.com/yifengketang/ThinkPHP6UniApp.git")])]),t._v(" "),e("ul",[e("li",[t._v("克隆的时候, 会将仓库的分支都克隆下来, 但是当使用 "),e("code",[t._v("git branch")]),t._v(" 的时候并不会显示, 但是此时仍然可以切换到仓库中存在的其他分支中")])]),t._v(" "),e("h4",{attrs:{id:"初始化仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化仓库"}},[t._v("#")]),t._v(" 初始化仓库")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("初始化仓库")]),t._v(" "),e("p",[e("code",[t._v("git init")])])]),t._v(" "),e("li",[e("p",[t._v("查看当前文件状态")]),t._v(" "),e("p",[e("code",[t._v("git status")])])]),t._v(" "),e("li",[e("p",[t._v("跟踪文件 (添加到暂存区)")]),t._v(" "),e("p",[e("code",[t._v("git add index.php")]),t._v("  添加某个单独的文件")]),t._v(" "),e("p",[e("code",[t._v("git add .")]),t._v(" 添加所有的文件")])]),t._v(" "),e("li",[e("p",[t._v("提交更改")]),t._v(" "),e("p",[e("code",[t._v("git commit -m 'add index.php'")])])]),t._v(" "),e("li",[e("p",[t._v("推到远程服务器")]),t._v(" "),e("p",[e("code",[t._v("git push origin xiaosheng")]),t._v(" 将本地 "),e("code",[t._v("xiaosheng")]),t._v(" 分支推送到远程名为 "),e("code",[t._v("origin")]),t._v(" 的仓库中")]),t._v(" "),e("ul",[e("li",[t._v("这样当下次其他人从远程仓库拉取代码的时候, 他们就会在本地生成一个远程分支 "),e("code",[t._v("origin/xiaosheng")]),t._v(", 指向服务器的 "),e("code",[t._v("xiaosheng")]),t._v(" 分支")])])])]),t._v(" "),e("h2",{attrs:{id:"git命令详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令详解"}},[t._v("#")]),t._v(" Git命令详解")]),t._v(" "),e("h3",{attrs:{id:"gitignore文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore文件"}},[t._v("#")]),t._v(" "),e("code",[t._v(".gitignore")]),t._v("文件")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("忽略提交指定的文件")])]),t._v(" "),e("li",[e("p",[t._v("规范如下 :")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("以 / 开头防止递归")])]),t._v(" "),e("li",[e("p",[t._v("以 / 结尾指定具体目录")])]),t._v(" "),e("li",[e("p",[e("code",[t._v(".env")]),t._v(" 只忽略当前目录下的 "),e("code",[t._v(".env")]),t._v("文件")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("/storage/")]),t._v(" 忽略当前目录下的 "),e("code",[t._v("storage")]),t._v(" 目录")])])])])]),t._v(" "),e("h3",{attrs:{id:"git-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" "),e("code",[t._v("git diff")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("查看已暂存的和未暂存的修改")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff")]),t._v(" 查看已经修改了但是并没有加入暂存区的文件中修改的内容, 可以用来比较工作区的当前文件和暂存区之间的差异")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git diff --staged")]),t._v(" 或者 "),e("code",[t._v("git diff --cached")]),t._v("  查看已经暂存的将要添加到下次提交的内容, 可以用来比较暂存区和最后一次提交之间的差异")])])]),t._v(" "),e("h3",{attrs:{id:"移除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移除文件"}},[t._v("#")]),t._v(" 移除文件")]),t._v(" "),e("ul",[e("li",[t._v("如果使用  "),e("code",[t._v("rm")]),t._v(" 删除文件的话, 此时 "),e("code",[t._v("Git")]),t._v(" 仍然在跟踪着, 下次提交的时候仍然会纳入版本库, 此时可以使用 "),e("code",[t._v("git rm 文件名")]),t._v(" 来删除")]),t._v(" "),e("li",[e("code",[t._v("git rm -f 文件名")]),t._v(" 删除之前已经修改的或者已经放到暂存区的")]),t._v(" "),e("li",[e("code",[t._v("git rm --cached 文件名或者目录名")]),t._v(" 从 "),e("code",[t._v("Git")]),t._v(" 仓库中移除 (不让 "),e("code",[t._v("Git")]),t._v(" 追踪), 但是本地仍然有此文件 (比如缓存文件一开始忘记添加在 "),e("code",[t._v(".gitignore")]),t._v(" 文件中的时候, 可以使用这种方式将缓存文件从 "),e("code",[t._v("Git")]),t._v(" 仓库中删除)")])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"移动文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动文件"}},[t._v("#")]),t._v(" 移动文件")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git mv 旧文件名 新文件名")]),t._v(" 可以用来移动文件或者重命名文件")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("以上命令相当于运行了下面三个命令 :")]),t._v(" "),e("p",[e("code",[t._v("mv 旧文件名 新文件名")])]),t._v(" "),e("p",[e("code",[t._v("git rm 旧文件名")])]),t._v(" "),e("p",[e("code",[t._v("git add 新文件名")])])])])])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"git-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" "),e("code",[t._v("git log")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git log")]),t._v(" 查看提交历史")])]),t._v(" "),e("li",[e("p",[t._v("没有任何参数的时候, "),e("code",[t._v("git log")]),t._v(" 会按照时间顺序显示所有的提交, 最新的在最上面")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log -p")]),t._v(" 或者 "),e("code",[t._v("git log --patch")]),t._v("  查看更加详细的提交历史")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log -n")]),t._v(" 显示最新的n条记录")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git log -1")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log -n")]),t._v(" 可以和 "),e("code",[t._v("git log --patch")]),t._v(" 联合使用 :")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git log -p -1")])])])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log --stat")]),t._v(" 查看提交的稍微详细的信息")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log --pretty")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git log --pretty=oneline")]),t._v(" 可以用于查看有大量的提交信息的时候")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log --pretty=oneline --graph")]),t._v(" 分支多的时候可以形象的展示分支以及分支的合并")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log --oneline --decorate")]),t._v(" 查看各个分支当前所指的对象")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log --author")]),t._v(" 查看某位作者的提交")])])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"撤销操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作"}},[t._v("#")]),t._v(" 撤销操作")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当提交完成后,发现有些文件没有添加,如 :")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add some files'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如忘记添加1.txt,可以进行如下操作")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".txt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这样就只会有一个提交")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("取消暂存的文件")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如已经暂存了 "),e("code",[t._v("1.txt")]),t._v(" 文件, 可以使用如下命令取消暂存 :")]),t._v(" "),e("p",[e("code",[t._v("git reset HEAD 1.txt")]),t._v(" 这个命令是比较危险的")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git reset HEAD")]),t._v(" 撤销最近的一次 add 操作 (取消所有的暂存)")])])])]),t._v(" "),e("li",[e("p",[t._v("撤销对文件的修改")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当对本地文件进行修改了, 还没有添加到暂存区, 此时想要回到修改之前的状态, 命令如下 :")]),t._v(" "),e("p",[e("code",[t._v("git checkout --1.txt")])]),t._v(" "),e("p",[e("code",[t._v("git checkout .")])])]),t._v(" "),e("li",[e("p",[t._v("当对本地文件进行了修改, 并且已经添加到暂存区了, 此时想要回到修改之前的状态, 命令如下 :")]),t._v(" "),e("p",[e("code",[t._v("git reset HEAD")])]),t._v(" "),e("p",[e("code",[t._v("git checkout .")])])]),t._v(" "),e("li",[e("p",[t._v("当对本地文件进行了修改, 并且已经使用 "),e("code",[t._v("commit")]),t._v(" 提交了, 此时想要回到没有提交之前并且没有修改的状态, 命令如下 :")]),t._v(" "),e("p",[e("code",[t._v("git reset --soft HEAD^")]),t._v(" 回退到 "),e("code",[t._v("commit")]),t._v(" 之前, 此时的修改已经添加到暂存区")]),t._v(" "),e("p",[e("code",[t._v("git reset HEAD")]),t._v(" 从暂存区中删除")]),t._v(" "),e("p",[e("code",[t._v("git checkout .")]),t._v(" 即可回到提交之前的状态")])])])]),t._v(" "),e("li",[e("p",[t._v("回到指定版本")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("方法1 :")]),t._v(" "),e("p",[e("code",[t._v("git log")]),t._v(" 查看想要回到的版本, 复制版本号")]),t._v(" "),e("p",[e("code",[t._v("git reset --hard 版本号")]),t._v(" 即可 ("),e("strong",[t._v("注意 : 使用该命令, 回到指定版本后, 该版本后面的提交也就都找不到了")]),t._v(")")]),t._v(" "),e("ul",[e("li",[t._v("如果使用了上面的命令后, 在 "),e("code",[t._v("git log")]),t._v(" 中查看不到后面版本的提交记录, 但是可以使用 "),e("code",[t._v("git reflog")]),t._v(" 来查看")]),t._v(" "),e("li",[t._v("然后仍然可以使用 "),e("code",[t._v("git reset --hard 版本号")]),t._v(" 来回滚")])])]),t._v(" "),e("li",[e("p",[t._v("方法2 :")]),t._v(" "),e("p",[e("code",[t._v("git revert HEAD")]),t._v(" 回到最近一次提交之前的版本 (比如 : 修改文件并提交了之后, 想要回到这次提交修改之前的样子, 则可以用此命令, 此命令会将本次 "),e("code",[t._v("revert")]),t._v(" 操作也看作是一次提交, 并且需要输入提交的备注信息)")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git revert -n 版本号")]),t._v(" 回到指定版本 (使用 "),e("code",[t._v("revert")]),t._v(" 回到指定版本的话, 该版本后面的提交仍然存在)")])])])])])]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"远程仓库-分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库-分支"}},[t._v("#")]),t._v(" 远程仓库 / 分支")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git remote -v")]),t._v(" 查看远程仓库")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git remote show origin")]),t._v(" 查看某一个远程仓库的具体信息")])]),t._v(" "),e("li",[e("p",[t._v("添加远程仓库")]),t._v(" "),e("p",[e("code",[t._v("git remote add 别名 地址")])])]),t._v(" "),e("li",[e("p",[t._v("重命名远程仓库")]),t._v(" "),e("p",[e("code",[t._v("git remote rename 旧名字 新名字")])])]),t._v(" "),e("li",[e("p",[t._v("删除某个远程仓库")]),t._v(" "),e("p",[e("code",[t._v("git remote remove 名字")])])]),t._v(" "),e("li",[e("p",[t._v("拉取远程仓库的代码")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git fetch 远程仓库的别名")]),t._v(" 此时会拉取远程仓库中的代码 (是本地没有的, 本地有的不会拉取), 此命令只是拉取, 并不会把拉下来的代码合并到本地分支")]),t._v(" "),e("li",[e("code",[t._v("git pull 远程仓库的别名")]),t._v("  此命令会拉取远程仓库的代码并自动尝试合并到当前分支中")])])]),t._v(" "),e("li",[e("p",[t._v("推送到远程仓库")]),t._v(" "),e("p",[e("code",[t._v("git push origin master")]),t._v(" 将本地 master 分支的代码推送到 origin 主机的 master 分支, 如果 master 分支不存在, 则会自动新建")]),t._v(" "),e("p",[e("code",[t._v("git push origin master:xiaosheng")]),t._v(" 将本地的 master 分支的代码推送到 origin 远程主机中的 xiaosheng 分支, 如果 xiaosheng 分支不存在, 那么将会自动在远程创建 xiaosheng 分支")])]),t._v(" "),e("li",[e("p",[t._v("跟踪远程指定分支")]),t._v(" "),e("p",[e("code",[t._v("git checkout --track origin/xiaosheng")]),t._v(" 跟踪远程 "),e("code",[t._v("origin")]),t._v(" 仓库中的 "),e("code",[t._v("xiaosheng")]),t._v(" 分支")])]),t._v(" "),e("li",[e("p",[t._v("将本地分支和远程分支设置为不同的名字")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b test origin/xiaosheng")])])]),t._v(" "),e("li",[e("p",[t._v("查看本地分支与远程分支的关系")]),t._v(" "),e("p",[e("code",[t._v("git branch -vv")])])]),t._v(" "),e("li",[e("p",[t._v("删除远程分支")]),t._v(" "),e("p",[e("code",[t._v("git push origin --delete xiaosheng")])])])]),t._v(" "),e("h3",{attrs:{id:"git-pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" "),e("code",[t._v("git pull")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("拉取指定分支代码")]),t._v(" "),e("p",[e("code",[t._v("git pull origin 远程分支")])]),t._v(" "),e("p",[e("code",[t._v("git pull origin 远程分支:本地分支")])])]),t._v(" "),e("li",[e("p",[t._v("强行覆盖本地代码")]),t._v(" "),e("p",[e("code",[t._v("git fetch --all")])]),t._v(" "),e("p",[e("code",[t._v("git reset --hard origin/master")])]),t._v(" "),e("p",[e("code",[t._v("git pull")])])])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),e("h3",{attrs:{id:"创建分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git branch 分支名")]),t._v(" 创建后并不会进入到新分支,仍然停留在当前分支")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git checkout -b 分支名")]),t._v(" 创建一个新分支并切换到新分支")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git log --oneline --decorate")]),t._v(" 查看各个分支当前所指的对象")])])]),t._v(" "),e("h3",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git branch -d 分支名")])])]),t._v(" "),e("h3",{attrs:{id:"查看分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[t._v("#")]),t._v(" 查看分支")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git branch")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("*")]),t._v(" 表示当前所处的分支")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch -v")]),t._v(" 查看每一个分支最后一次的提交")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git branch --merged")]),t._v(" 查看有哪些分支合并到了当前的分支\n"),e("img-wrapper",[e("img",{attrs:{src:_(403)}})])],1),t._v(" "),e("ul",[e("li",[e("p",[t._v("上图所显示的是已经将 "),e("code",[t._v("test41")]),t._v(" 分支合并到 "),e("code",[t._v("test4")]),t._v(" 分支后, 使用 "),e("code",[t._v("git branch --merged")]),t._v(" 后查看到的结果")])]),t._v(" "),e("li",[e("p",[t._v("当把 "),e("code",[t._v("test41")]),t._v(" 分支删除后, 则如下图所示 :\n"),e("img-wrapper",[e("img",{attrs:{src:_(404)}})])],1)])])])]),t._v(" "),e("h3",{attrs:{id:"分支切换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支切换"}},[t._v("#")]),t._v(" 分支切换")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git checkout 分支名")])])]),t._v(" "),e("h3",{attrs:{id:"分支真的很厉害"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支真的很厉害"}},[t._v("#")]),t._v(" 分支真的很厉害")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("(感觉有点类似于双系统), 如下 :\n"),e("img-wrapper",[e("img",{attrs:{src:_(405)}})])],1)]),t._v(" "),e("li",[e("p",[t._v("如上所示, 处于同一个文件夹下, 只不过是不同的分支, 就可以展示出不同的内容")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("test4")]),t._v(" 分支中新增了 "),e("code",[t._v("test.php")]),t._v(" 文件, 当进行 "),e("code",[t._v("add")]),t._v(" 和 "),e("code",[t._v("commit")]),t._v(" 操作之后, 在其他分支就看不到了, 如果没有进行 "),e("code",[t._v("commit")]),t._v(" 操作,那么在其他分支中仍然可以看到")])])]),t._v(" "),e("h3",{attrs:{id:"项目分叉历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目分叉历史"}},[t._v("#")]),t._v(" 项目分叉历史")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git log --oneline --decorate --graph --all")])])]),t._v(" "),e("h3",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git merge 要合并的分支名")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("例 : 要把 "),e("code",[t._v("test1")]),t._v(" 分支合并到 "),e("code",[t._v("master")]),t._v(" 分支中, 操作步骤如下 :")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge test1\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d test1 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test1 分支已经合并到master分支, 如果没有作用的话则可以删除")]),t._v("\n")])])]),e("ul",[e("li",[e("p",[t._v("合并的时候会发生冲突 :")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当在不同的分支对同一个文件进行了修改后, 当合并这两个分支的时候就会发生冲突, 发生冲突后 "),e("code",[t._v("Git")]),t._v(" 会在有冲突的文件中给出如下的提示 :")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HEAD:index.html\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"footer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("contact "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" email.support@github.com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"footer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n please contact us at support@github.com\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" iss53:index.html\n")])])])]),t._v(" "),e("li",[e("p",[t._v("其中 "),e("code",[t._v("HEAD")]),t._v(" 部分的内容表示的是当前所在分支中的内容, ==== 下面的则表示的要合并的分支中的内容")])]),t._v(" "),e("li",[e("p",[t._v("此处的冲突需要自己来选择保留哪一部分的代码")])]),t._v(" "),e("li",[e("p",[t._v("解决完冲突后可以运行 "),e("code",[t._v("git status")]),t._v(" 来查看当前的状态, 如果需要跟踪修改的文件的话则跟踪, 否则可以进行提交动作")])])])])])])])])]),t._v(" "),e("h2",{attrs:{id:"变基"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变基"}},[t._v("#")]),t._v(" 变基")]),t._v(" "),e("h3",{attrs:{id:"合并多次-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并多次-commit"}},[t._v("#")]),t._v(" 合并多次 "),e("code",[t._v("commit")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i 版本号 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#合并当前版本号到指定版本号之间的所有记录")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i HEAD~3 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#从当前版本开始合并最近的三次提交记录")]),t._v("\n")])])]),e("ul",[e("li",[t._v("输入上面的合并命令后, 会出来两个 "),e("code",[t._v("vim")]),t._v(" 的编辑记录\n"),e("ul",[e("li",[t._v("第一个可以指定将所选择的提交版本合并到哪一个版本号中, 是将需要合并的记录前面的 pick 改成 s, 要合并到的记录不用改变")]),t._v(" "),e("li",[t._v("第二个是提交的注释")])])])]),t._v(" "),e("h3",{attrs:{id:"解决分叉问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决分叉问题"}},[t._v("#")]),t._v(" 解决分叉问题")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("可以使用 "),e("code",[t._v("git log --graph")]),t._v(" 以图形流线的格式显示提交记录, 这样容易观察出来提交记录中的分叉")])]),t._v(" "),e("li",[e("p",[t._v("如下图所示\n"),e("img-wrapper",[e("img",{attrs:{src:_(406)}})])],1),t._v(" "),e("ul",[e("li",[t._v("如果想要把上面红框中的提交记录变成下面的提交记录的样子, 则需要用到变基, 步骤如下:\n"),e("ul",[e("li",[t._v("分为两个分支, dev 和 master, 第一个红框中的第一行是 master 分支, 第二行是 dev 分支")]),t._v(" "),e("li",[t._v("先执行 "),e("code",[t._v("git checkout dev")])]),t._v(" "),e("li",[e("code",[t._v("git rebase master")]),t._v(", 将 master 分支中的内容合并到 dev 分支中")]),t._v(" "),e("li",[e("code",[t._v("git checkout master")])]),t._v(" "),e("li",[e("code",[t._v("git rebase dev")])])])])])])]),t._v(" "),e("h3",{attrs:{id:"解决-git-pull-会产生分叉问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决-git-pull-会产生分叉问题"}},[t._v("#")]),t._v(" 解决 "),e("code",[t._v("git pull")]),t._v(" 会产生分叉问题")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git pull")]),t._v(" 相当于 "),e("code",[t._v("git fetch")]),t._v(" + "),e("code",[t._v("git merge")]),t._v(", 这样会产生分叉, 解决办法如下:")]),t._v(" "),e("li",[t._v("先执行 "),e("code",[t._v("git fetch origin master 或者 dev")])]),t._v(" "),e("li",[e("code",[t._v("git rebase origin/master 或者 origin/dev")])])]),t._v(" "),e("hr"),t._v(" "),e("ul",[e("li",[t._v("使用 "),e("code",[t._v("git rebase")]),t._v(" 有的时候会产生冲突, 当报有冲突的时候, 先解决冲突, 然后 "),e("code",[t._v("git add .")]),t._v(", 接着执行 "),e("code",[t._v("git rebase --continue")])])]),t._v(" "),e("h2",{attrs:{id:"删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),e("ul",[e("li",[t._v("从当前项目中删除文件并且放弃追踪: "),e("code",[t._v("git rm 文件名")])]),t._v(" "),e("li",[t._v("放弃追踪某个文件但是该文件还留在当前目录: "),e("code",[t._v("git rm --cached 文件名")])])]),t._v(" "),e("h2",{attrs:{id:"强推"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强推"}},[t._v("#")]),t._v(" 强推")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git push origin master --force")])])]),t._v(" "),e("RightMenu")],1)}),[],!1,null,null,null);v.default=a.exports}}]);