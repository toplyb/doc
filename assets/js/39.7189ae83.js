(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{453:function(t,e,a){"use strict";a.r(e);var s=a(51),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"镜像命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[t._v("#")]),t._v(" 镜像命令")]),t._v(" "),a("h3",{attrs:{id:"docker-images"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-images"}},[t._v("#")]),t._v(" "),a("code",[t._v("docker images")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("docker images")]),t._v(": 查看本地的所有镜像")])]),t._v(" "),a("li",[a("p",[t._v("后面可以跟的常用参数有 :")]),t._v(" "),a("ul",[a("li",[t._v("-a : 列出所有的镜像")]),t._v(" "),a("li",[t._v("-q : 只显示镜像 id")])])]),t._v(" "),a("li",[a("p",[t._v("REPOSITORY : 镜像的仓库源")])]),t._v(" "),a("li",[a("p",[t._v("TAG : 镜像的标签")])]),t._v(" "),a("li",[a("p",[t._v("TMAGE ID : 镜像的 id")])]),t._v(" "),a("li",[a("p",[t._v("CREATED : 镜像的创建时间")])]),t._v(" "),a("li",[a("p",[t._v("SIZE : 镜像的大小")])])]),t._v(" "),a("h3",{attrs:{id:"docker-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-search"}},[t._v("#")]),t._v(" "),a("code",[t._v("docker search")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker search")]),t._v(" : 搜索镜像")]),t._v(" "),a("li",[a("code",[t._v("docker search mysql --filter=STARS=3000")]),t._v(": 搜索 MySQL 镜像 stars 超过 3000 的镜像")])]),t._v(" "),a("h3",{attrs:{id:"docker-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-pull"}},[t._v("#")]),t._v(" "),a("code",[t._v("docker pull")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker pull 镜像名称:[tag版本]")]),t._v(" : 下载镜像, 默认下载最新版")])]),t._v(" "),a("h3",{attrs:{id:"docker-rmi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-rmi"}},[t._v("#")]),t._v(" "),a("code",[t._v("docker rmi")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker rmi -f 镜像id")]),t._v(" : 删除指定镜像, 如果要删除多个镜像, 则每个镜像 id 之间用空格隔开")]),t._v(" "),a("li",[a("code",[t._v("docker rmi -f $(docker images -aq)")]),t._v(" : 删除所有的镜像")])]),t._v(" "),a("h2",{attrs:{id:"容器命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[t._v("#")]),t._v(" 容器命令")]),t._v(" "),a("ul",[a("li",[t._v("有了镜像后才可以创建容器")])]),t._v(" "),a("h3",{attrs:{id:"新建容器并启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建容器并启动"}},[t._v("#")]),t._v(" 新建容器并启动")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("docker run [可选参数] 镜像id")])])]),t._v(" "),a("li",[a("p",[t._v("参数:")]),t._v(" "),a("ul",[a("li",[t._v('--name="容器名称"')]),t._v(" "),a("li",[t._v("-d : 以后台方式运行")]),t._v(" "),a("li",[t._v("-it : 进入到容器内部, 常用的是: "),a("code",[t._v("docker run -it centos /bin/bash")])]),t._v(" "),a("li",[t._v("-p : 指定容器端口\n"),a("ul",[a("li",[t._v("-p ip:主机端口:容器端口")]),t._v(" "),a("li",[t._v("-p 主机端口:容器端口")]),t._v(" "),a("li",[t._v("-p 容器端口")]),t._v(" "),a("li",[t._v("容器端口")])])]),t._v(" "),a("li",[t._v("-P : 随机指定端口")]),t._v(" "),a("li",[t._v("-e : 环境配置, 如配置 MySQL 密码")])])])]),t._v(" "),a("h3",{attrs:{id:"退出容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出容器"}},[t._v("#")]),t._v(" 退出容器")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("exit")]),t._v(" : 退出并关闭容器")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("command + p + q")]),t._v(" : 退出但是不关闭容器")])])]),t._v(" "),a("h3",{attrs:{id:"查看正在运行中的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看正在运行中的容器"}},[t._v("#")]),t._v(" 查看正在运行中的容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker ps")])]),t._v(" "),a("li",[a("code",[t._v("docker ps -a")]),t._v(" : 查看正在运行的容器和曾经运行过的容器")]),t._v(" "),a("li",[a("code",[t._v("docker ps -n=3")]),t._v(": 显示最近新建的 3 个容器")]),t._v(" "),a("li",[a("code",[t._v("docker ps -q")]),t._v(" : 只显示容器的编号")])]),t._v(" "),a("h3",{attrs:{id:"删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[t._v("#")]),t._v(" 删除容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker rm 容器id")]),t._v(" : 删除指定的容器, 不能删除正在运行的容器, 如果想要删除正在运行的, 可以使用 rm -f")]),t._v(" "),a("li",[a("code",[t._v("docker rm -f $(docker ps -aq)")]),t._v(" : 删除所有的容器")]),t._v(" "),a("li",[a("code",[t._v("docker ps -a -q|xargs docker rm")]),t._v(" : 删除所有的容器")])]),t._v(" "),a("h3",{attrs:{id:"启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[t._v("#")]),t._v(" 启动容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker start 容器id")])])]),t._v(" "),a("h3",{attrs:{id:"重启容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重启容器"}},[t._v("#")]),t._v(" 重启容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker restart 容器id")])])]),t._v(" "),a("h3",{attrs:{id:"停止正在运行的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止正在运行的容器"}},[t._v("#")]),t._v(" 停止正在运行的容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker stop 容器id")])])]),t._v(" "),a("h3",{attrs:{id:"强制停止正在运行的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制停止正在运行的容器"}},[t._v("#")]),t._v(" 强制停止正在运行的容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker kill 容器id")])])]),t._v(" "),a("h2",{attrs:{id:"其他常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他常用命令"}},[t._v("#")]),t._v(" 其他常用命令")]),t._v(" "),a("h3",{attrs:{id:"常看日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常看日志"}},[t._v("#")]),t._v(" 常看日志")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("docker logs -tf 容器id")]),t._v(" : 查看指定容器的日志")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("docker logs -tf --tail 10 容器id")]),t._v(" : 查看指定容器的最近 10 条的日志")])])]),t._v(" "),a("h3",{attrs:{id:"查看容器的进程信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看容器的进程信息"}},[t._v("#")]),t._v(" 查看容器的进程信息")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker top 容器id")])])]),t._v(" "),a("h3",{attrs:{id:"查看镜像的元数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看镜像的元数据"}},[t._v("#")]),t._v(" 查看镜像的元数据")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker inspect 镜像id")])])]),t._v(" "),a("h3",{attrs:{id:"进入当前正在运行的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入当前正在运行的容器"}},[t._v("#")]),t._v(" 进入当前正在运行的容器")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker exec -it 容器id /bin/bash")]),t._v(" : 进入容器后新开启一个终端, 可以在里面进行一些操作 (常用)")]),t._v(" "),a("li",[a("code",[t._v("docker attach 容器id")]),t._v(" : 进入当前正在执行的终端")])]),t._v(" "),a("h3",{attrs:{id:"从容器内拷贝文件到主机上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从容器内拷贝文件到主机上"}},[t._v("#")]),t._v(" 从容器内拷贝文件到主机上")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker cp 容器id:容器内路径 目的主机路径")])])]),t._v(" "),a("h3",{attrs:{id:"查看-cpu-状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看-cpu-状态"}},[t._v("#")]),t._v(" 查看 CPU 状态")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker stats")])])]),t._v(" "),a("h3",{attrs:{id:"增加-tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增加-tag"}},[t._v("#")]),t._v(" 增加 tag")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker tag 镜像id 镜像名称:版本号")])])]),t._v(" "),a("h2",{attrs:{id:"commit-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-镜像"}},[t._v("#")]),t._v(" commit 镜像")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker commit -m='提交的描述信息' -a='作者' 容器id 目标镜像名:[版本]")])])]),t._v(" "),a("h2",{attrs:{id:"数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[t._v("#")]),t._v(" 数据卷")]),t._v(" "),a("h3",{attrs:{id:"查看所有的数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看所有的数据卷"}},[t._v("#")]),t._v(" 查看所有的数据卷")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker volume ls")])]),t._v(" "),a("li",[t._v("可以使用 "),a("code",[t._v("docker inspect 容器id")]),t._v(" 来查看是否挂载成功, 在显示的信息中查看 Mounts 部分的内容")])]),t._v(" "),a("h3",{attrs:{id:"指定路径挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定路径挂载"}},[t._v("#")]),t._v(" 指定路径挂载")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker run -it -v 主机目录:容器内目录 镜像名称 /bin/bash")])])]),t._v(" "),a("h3",{attrs:{id:"匿名挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名挂载"}},[t._v("#")]),t._v(" 匿名挂载")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker run -it -v 容器内目录 镜像名称")])])]),t._v(" "),a("h3",{attrs:{id:"具名挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具名挂载"}},[t._v("#")]),t._v(" 具名挂载")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("大多数情况下都使用的是具名挂载")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("docker run -it -v 随便起的名字:容器内目录 镜像名称")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("docker run -it -v 随便起的名字:容器内目录:ro 镜像名称")]),t._v(" : 其中 ro 表示的是只能读, read only, 表示的是不能在容器内部进行修改, 只能通过宿主机来修改")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("docker run -it -v 随便起的名字:容器内目录:rw 镜像名称")]),t._v(" : 其中 rw 表示的是可读可写, read write (默认的)")])])]),t._v(" "),a("h3",{attrs:{id:"使用-dockerfile-来挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-来挂载"}},[t._v("#")]),t._v(" 使用 dockerfile 来挂载")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("案例:")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("touch dockerfile")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("vim dockerfile")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v(" FROM centos\n VOLUME "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'volume01'")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'volume02'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n \n CMD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'====end======'")]),t._v("\n CMD /bin/bash\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("docker build -f dockerfile -t xiaosheng/centos .")])]),t._v(" "),a("ul",[a("li",[t._v("-f : 表示 dockerfile 文件的路径")]),t._v(" "),a("li",[t._v("-t : 表示要生成的镜像名称")]),t._v(" "),a("li",[t._v(". : 表示要生成在哪个目录下")])])]),t._v(" "),a("li",[a("p",[t._v("最后可以使用 "),a("code",[t._v("docker inspect 镜像id")]),t._v(" 来查看数据卷的详细信息")])])])])]),t._v(" "),a("h3",{attrs:{id:"查看指定数据卷对应的目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看指定数据卷对应的目录"}},[t._v("#")]),t._v(" 查看指定数据卷对应的目录")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("docker volume inspect 具名挂载时起的名字")])]),t._v(" "),a("li",[t._v("当挂载数据卷并且没有指定路径的时候,"),a("code",[t._v("Linux")]),t._v(" 中一般都是挂载在 "),a("code",[t._v("/var/lib/docker/volume")]),t._v(" 目录中")])]),t._v(" "),a("h3",{attrs:{id:"配置-mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-mysql"}},[t._v("#")]),t._v(" 配置 MySQL")]),t._v(" "),a("p",[a("code",[t._v("docker run -d -p 3306:3306 -v /home/mysql/my.conf:/etc/mysql/my.conf -v /home/mysql/data:/use/local/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7")])]),t._v(" "),a("ul",[a("li",[t._v("-e 可以用来配置 MySQL 密码, 可以同时挂载多个数据卷")])]),t._v(" "),a("h3",{attrs:{id:"数据卷容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器"}},[t._v("#")]),t._v(" 数据卷容器")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可以在多个容器之间共享数据")])]),t._v(" "),a("li",[a("p",[t._v("案例")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("先开启一个 nginx01 的容器")])]),t._v(" "),a("li",[a("p",[t._v("然后需要再开启一个 nginx02 的容器, 同时这两个容器之间需要数据共享, 那就在开启 nginx02 的时候就可以使用以下命令:")]),t._v(" "),a("p",[a("code",[t._v("docker run -it --name nginx02 --volumes-from nginx01 xiaosheng/centos")])])]),t._v(" "),a("li",[a("p",[t._v("同时还可以有其他的容器来和 nginx01 一起共享数据")])]),t._v(" "),a("li",[a("p",[t._v("即便 nginx01 容器关掉或者销毁, 并不会影响到其他容器中共享的数据")])]),t._v(" "),a("li",[a("p",[t._v("只要还有一个容器在使用, 那么数据就不会消失")])])])])]),t._v(" "),a("h2",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),a("ul",[a("li",[t._v("dockerfile 是用来构建 docker 镜像的文件")])]),t._v(" "),a("h3",{attrs:{id:"步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤 :")]),t._v(" "),a("ol",[a("li",[t._v("编写 dockerfile 文件")]),t._v(" "),a("li",[t._v("docker build 构建成为一个镜像")]),t._v(" "),a("li",[t._v("docker run 运行镜像")]),t._v(" "),a("li",[t._v("docker push 发布镜像 (可以发布到 dockerhub 或者是 阿里云镜像仓库)")])]),t._v(" "),a("h3",{attrs:{id:"dockerfile-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件"}},[t._v("#")]),t._v(" dockerfile 文件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("每一个保留关键字 (指令) 都必须是大写")])]),t._v(" "),a("li",[a("p",[t._v("从上往下开始执行")])]),t._v(" "),a("li",[a("p",[t._v("# 表示注释")])]),t._v(" "),a("li",[a("p",[t._v("每一个指令都会创建一个镜像层")])]),t._v(" "),a("li",[a("p",[t._v("常用指令:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("FROM  \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基础镜像")]),t._v("\nMAINTAINER \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 镜像作者, 一般是姓名<邮箱>")]),t._v("\nRUN   \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建镜像的时候需要运行的命令")]),t._v("\nADD  \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建镜像的时候, 需要添加的内容, 比如要在 centos 镜像中添加一个 NGINX, 如果添加的是一个压缩包的话, 会自动解压")]),t._v("\nWORKDIR \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 镜像的工作目录")]),t._v("\nVOLUME \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 挂载的目录")]),t._v("\nEXPOSE \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 端口配置")]),t._v("\nCMD \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器启动的时候需要运行的命令, 只有最后一个会生效, 这个最后一个生效, 并不是指在 dockerfile 文件中, 在 dockerfile 文件中仍然可以有多个 CMD 命令, 指的是在使用 docker run 的时候, 后面不能加命令, 如果加了, 那么 docker run 后面的命令将会替换掉 dockerfile 文件中的命令")]),t._v("\nENTRYPOINT \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器启动的时候需要运行的命令, 可以追加命令")]),t._v("\nONBUILD \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当构建一个被继承的 dockerfile 的时候, 会运行 ONBUILD 指令")]),t._v("\nCOPY \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将文件拷贝到镜像中")]),t._v("\nENV \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建的时候设置环境变量")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("案例 (尝试构建自己的 centos)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("编写 dockerfile 文件")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("FROM centos  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基础镜像是 centos")]),t._v("\nMAINTAINER xiaosheng"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1029739052")]),t._v("@qq.com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 作者信息")]),t._v("\n\nENV MYPATH /usr/local "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自定义一个变量 MYPATH, 值是 /usr/local")]),t._v("\nWORKDIR "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MYPATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定工作目录, 即用户当进去 centos 后所在的目录")]),t._v("\n\nRUN yum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 vim")]),t._v("\nRUN yum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" net-tools "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 net-tools")]),t._v("\n\nEXPOSE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暴露端口")]),t._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MYPATH")]),t._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===end===="')]),t._v("\nCMD /bin/bash\n")])])])]),t._v(" "),a("li",[a("p",[t._v("开始构建")]),t._v(" "),a("p",[a("code",[t._v("docker build -f dockerfile文件的地址 -t 镜像名:[版本号]")])])]),t._v(" "),a("li",[a("p",[t._v("使用 "),a("code",[t._v("docker history 镜像id")]),t._v(" 来查看镜像的构建历史")])])])])]),t._v(" "),a("h2",{attrs:{id:"发布镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布镜像"}},[t._v("#")]),t._v(" 发布镜像")]),t._v(" "),a("h3",{attrs:{id:"发布到-dockerhub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布到-dockerhub"}},[t._v("#")]),t._v(" 发布到 dockerhub")]),t._v(" "),a("ul",[a("li",[t._v("注册一个 dockerhub 的账号")]),t._v(" "),a("li",[a("code",[t._v("docker login -u 用户名")]),t._v(", 然后输入密码")]),t._v(" "),a("li",[a("code",[t._v("docker push 用户名(随便起的)/镜像名:版本号")])])]),t._v(" "),a("h3",{attrs:{id:"发布到阿里云"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布到阿里云"}},[t._v("#")]),t._v(" 发布到阿里云")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可以先将 docker 的镜像更换成自己的阿里云中提供的镜像地址")])]),t._v(" "),a("li",[a("p",[t._v("登录阿里云, 进入容器镜像")])]),t._v(" "),a("li",[a("p",[t._v("创建命名空间和镜像仓库, 创建仓库的时候选择本地仓库")])])]),t._v(" "),a("RightMenu")],1)}),[],!1,null,null,null);e.default=v.exports}}]);